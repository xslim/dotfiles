# vim: filetype=muttrc
# gpg stuff

set pgp_use_gpg_agent = yes
#set crypt_use_gpgme=yes
set pgp_replysign = yes
set pgp_replyencrypt = yes
set pgp_replysignencrypted = yes
set pgp_verify_sig = yes

# it's a regexp used against the GPG output: if it matches some line of the output # then mutt considers the message a good signed one (ignoring the GPG exit code)
set pgp_good_sign="^gpg: Good signature from"

set pgp_timeout=1800

#set pgp_verify_sig
set pgp_decode_command="gpg %?p?--passphrase-fd 0? --quiet --no-verbose --batch --no-tty -o - %f"
set pgp_verify_command="gpg --quiet --no-verbose --batch --no-tty -o - --verify %s %f"
set pgp_decrypt_command="gpg %?p?--passphrase-fd 0? --quiet --no-verbose --batch -o - %f"
set pgp_sign_command="gpg --no-verbose --batch -o - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch -o - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_encrypt_only_command="pgpewrap gpg -v --batch -o - --encrypt --textmode --armor --always-trust %?a?-u %a? -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg %?p?--passphrase-fd 0? -v --batch -o - --encrypt --sign --armor --always-trust %?a?-u %a? -- -r %r -- %f"
set pgp_import_command="gpg --no-verbose --import -v %f"
set pgp_export_command="gpg --no-verbose --export --armor %r"
set pgp_verify_key_command="gpg --quiet --no-verbose --batch --fingerprint --check-sigs %r"
set pgp_list_pubring_command="gpg --no-verbose --batch --with-colons --list-keys %r" 
set pgp_list_secring_command="gpg --no-verbose --batch --with-colons --list-secret-keys %r" 

# key binds
bind compose p  pgp-menu
macro compose Y pfy "send mail without GPG"
